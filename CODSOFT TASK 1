import os

# File to store tasks
TASKS_FILE = 'tasks.txt'

def load_tasks():
    if not os.path.exists(TASKS_FILE):
        return []
    with open(TASKS_FILE, 'r') as file:
        tasks = file.readlines()
    return [task.strip() for task in tasks]

def save_tasks(tasks):
    with open(TASKS_FILE, 'w') as file:
        for task in tasks:
            file.write(task + '\n')

def add_task():
    task = input("Enter a new task: ")
    tasks = load_tasks()
    tasks.append(task)
    save_tasks(tasks)
    print("Task added!")

def view_tasks():
    tasks = load_tasks()
    if not tasks:
        print("No tasks found.")
    else:
        for i, task in enumerate(tasks):
            print(f"{i + 1}. {task}")

def update_task():
    tasks = load_tasks()
    view_tasks()
    task_num = int(input("Enter the number of the task to update: ")) - 1
    if 0 <= task_num < len(tasks):
        new_task = input("Enter the new task: ")
        tasks[task_num] = new_task
        save_tasks(tasks)
        print("Task updated!")
    else:
        print("Invalid task number.")

def delete_task():
    tasks = load_tasks()
    view_tasks()
    task_num = int(input("Enter the number of the task to delete: ")) - 1
    if 0 <= task_num < len(tasks):
        tasks.pop(task_num)
        save_tasks(tasks)
        print("Task deleted!")
    else:
        print("Invalid task number.")

def mark_task_completed():
    tasks = load_tasks()
    view_tasks()
    task_num = int(input("Enter the number of the task to mark as completed: ")) - 1
    if 0 <= task_num < len(tasks):
        tasks[task_num] = tasks[task_num] + " [Completed]"
        save_tasks(tasks)
        print("Task marked as completed!")
    else:
        print("Invalid task number.")

def show_menu():
    print("\nTo-Do List Application")
    print("1. Add Task")
    print("2. View Tasks")
    print("3. Update Task")
    print("4. Delete Task")
    print("5. Mark Task as Completed")
    print("6. Exit")

def main():
    while True:
        show_menu()
        choice = input("Choose an option: ")
        if choice == '1':
            add_task()
        elif choice == '2':
            view_tasks()
        elif choice == '3':
            update_task()
        elif choice == '4':
            delete_task()
        elif choice == '5':
            mark_task_completed()
        elif choice == '6':
            print("Goodbye!")
            break
        else:
            print("Invalid choice, please try again.")

if _name_ == "_main_":
    main()
import tkinter as tk
from tkinter import messagebox

# File to store tasks
TASKS_FILE = 'tasks.txt'

def load_tasks():
    try:
        with open(TASKS_FILE, 'r') as file:
            tasks = file.readlines()
        return [task.strip() for task in tasks]
    except FileNotFoundError:
        return []

def save_tasks(tasks):
    with open(TASKS_FILE, 'w') as file:
        for task in tasks:
            file.write(task + '\n')

def add_task():
    task = task_entry.get()
    if task:
        tasks_listbox.insert(tk.END, task)
        task_entry.delete(0, tk.END)
        tasks = load_tasks()
        tasks.append(task)
        save_tasks(tasks)
    else:
        messagebox.showwarning("Warning", "You must enter a task.")

def delete_task():
    try:
        selected_task_index = tasks_listbox.curselection()[0]
        tasks_listbox.delete(selected_task_index)
        tasks = load_tasks()
        tasks.pop(selected_task_index)
        save_tasks(tasks)
    except IndexError:
        messagebox.showwarning("Warning", "You must select a task to delete.")

def update_task():
    try:
        selected_task_index = tasks_listbox.curselection()[0]
        new_task = task_entry.get()
        if new_task:
            tasks_listbox.delete(selected_task_index)
            tasks_listbox.insert(selected_task_index, new_task)
            tasks = load_tasks()
            tasks[selected_task_index] = new_task
            save_tasks(tasks)
            task_entry.delete(0, tk.END)
        else:
            messagebox.showwarning("Warning", "You must enter a task.")
    except IndexError:
        messagebox.showwarning("Warning", "You must select a task to update.")

def mark_task_completed():
    try:
        selected_task_index = tasks_listbox.curselection()[0]
        tasks = load_tasks()
        task = tasks[selected_task_index]
        tasks[selected_task_index] = task + " [Completed]"
        save_tasks(tasks)
        tasks_listbox.delete(selected_task_index)
        tasks_listbox.insert(selected_task_index, tasks[selected_task_index])
    except IndexError:
        messagebox.showwarning("Warning", "You must select a task to mark as completed.")

def load_initial_tasks():
    tasks = load_tasks()
    for task in tasks:
        tasks_listbox.insert(tk.END, task)

# Create the main window
root = tk.Tk()
root.title("To-Do List Application")

# Create a frame for the listbox and scrollbar
frame = tk.Frame(root)
frame.pack(pady=10)

# Create a listbox to display tasks
tasks_listbox = tk.Listbox(
    frame,
    width=50,
    height=10,
    selectmode=tk.SINGLE,
    bd=0,
    highlightthickness=0
)
tasks_listbox.pack(side=tk.LEFT, fill=tk.BOTH)

# Create a scrollbar
scrollbar = tk.Scrollbar(frame)
scrollbar.pack(side=tk.RIGHT, fill=tk.BOTH)

# Attach scrollbar to listbox
tasks_listbox.config(yscrollcommand=scrollbar.set)
scrollbar.config(command=tasks_listbox.yview)

# Create an entry widget to accept user input
task_entry = tk.Entry(root, width=50)
task_entry.pack(pady=10)

# Create a frame for buttons
button_frame = tk.Frame(root)
button_frame.pack(pady=10)

# Add buttons
add_button = tk.Button(button_frame, text="Add Task", command=add_task)
add_button.grid(row=0, column=0, padx=5)

update_button = tk.Button(button_frame, text="Update Task", command=update_task)
update_button.grid(row=0, column=1, padx=5)

delete_button = tk.Button(button_frame, text="Delete Task", command=delete_task)
delete_button.grid(row=0, column=2, padx=5)

mark_completed_button = tk.Button(button_frame, text="Completed",
command=mark_task_completed)
mark_completed_button.grid(row=0, column=3, padx=5)

# Load the initial tasks from the file
load_initial_tasks()

# Start the main event loop
root.mainloop()
